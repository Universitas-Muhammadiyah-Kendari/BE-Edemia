# This is a basic workflow to help you get started with Actions

name: Edemia

# Controls when the workflow will run
# Triggers the workflow on push or pull request events but only for the "master" branch
on: [push]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  test-backend:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    name: Install dependencies and test backend
    
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_DB: edemia
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_HOST_AUTH_METHOD: trust
          POSTGRES_INITDB_ARGS: --data-checksums
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432
    
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.16
      - name: Build
        working-directory: ./server
        run: go build -v ./...
      - name: Test Preparation
        working-directory: ./server
        run: |
          cp -f config/.env.example config/app.env
          cp -f config/.env.ci config/test.env
          mkdir coverage
      - name: Migration Table
        run: |
          curl -L https://github.com/golang-migrate/migrate/releases/download/v4.15.2/migrate.linux-amd64.tar.gz | tar xvz
          sudo mv migrate $GOPATH/bin/migrate
          make migrateup
      - name: Test
        working-directory: ./server
        run: |
          go test -v -coverpkg=./... -coverprofile=coverage/coverage.out ./... && go tool cover -func coverage/coverage.out
      - name: Archive code coverage results
        uses: actions/upload-artifact@v3
        with:
          name: coverage-backend
          path: ./server/coverage
          retention-days: 1      
  
  sonarcloud:
    name: SonarCloud
    runs-on: ubuntu-latest
    needs: [test-backend]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: download backend code coverage
        uses: actions/download-artifact@v3
        with:
          name: coverage-backend
          path: ./server/coverage
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}